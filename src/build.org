#+TITLE: About this Portfolio

* How the Sausage Gets Made
:properties:
:html_container: article
:end:
This portfolio uses Emacs' ~org-mode~ as its content authoring system.
In the future, I might spend more time talking about this,
    but this document currently exists solely as a literate build script
    for the publishing configuration.
Before we start,
    a note on terminology:
    I use "org" on its own
    to refer to the lightweight markup syntax used by ~org-mode~,
    as well as files written in the format ("org files").
Additionally, I'll generally set the name of the Emacs mode in ~fixed-pitch~,
    like I would set the names of functions, modules, variables, and the like.
In the original org sources,
    I try to use =~tildes~= for such tokens,
    and ==equals==  for other verbatim text and the names of files,
    though they render identically in HTML[fn::
    At some point,
        when I have more time,
        I'll probably write a custom exporter for HTML,
        both to differentiate tilde and equals
        (I'm thinking ~<samp>~ for the latter)
        and to wrap footnotes in a proper <aside>.].
** The scripts
:properties:
:html_container: section
:end:
There are two scripts involved in the build process.
The first, a shell script, handles launching the build script,
    while the second is the Emacs Lisp script that does the actual building.
*** =build.sh=
:properties:
:html_container: section
:end:
Originally, the shell script simply launched the Lisp script,
    but it didn't take long to realize
    that I was grossly underutilizing the script's automation potential.
While it can still run a single on-demand build
    when run with no arguments
    (and does in the GitHub Pages CI job),
    passing the =start= argument
    launches a full auto-rebuilding local development environment
    that I've tailored for my AwesomeWM setup,
    including a Chromium app window,
    Chromium dev tools,
    a browser auto-reloader (I'm using [[https://github.com/tapio/live-server][live-server]]),
    and an ~inotifywait~-powered runner for the publishing script.
The final script looks like this:
#+begin_src shell :tangle ../build
#!/bin/bash

publish () {
  emacs -Q --script publish.el
}

if [ $# -gt 0 ]; then
  case "$1" in
    "start")
      alacritty -e \
        live-server public/ --port=3000 --no-browser &
      sleep 1
      chromium --app="http://localhost:3000" --class=noswallow \
        --auto-open-devtools-for-tabs --force-dark-mode \
        >/dev/null 2>&1 &
      inotifywait -rm ./ -e close_write |
        while read directory action file; do
          if [ "$file" = "publish.el" ] || [ -z "${directory##./src*}" ];
          then
            echo "Detected change in ${directory}${file}"
            publish
          fi
        done
      ;;
    "clean")
      rm -rf public archive
      ;;
  esac
else
  publish
fi
#+end_src

*** =publish.el=
:properties:
:html_container: section
:end:
The publishing script is more involved,
    but almost all of it is configuring the publishing environment.
**** Dependencies
:properties:
:html_container: section
:end:
First, we pull in Emacs' package management and initialize it:
#+begin_src emacs-lisp :tangle ../publish.el
(require 'package)
(setq package-user-dir (expand-file-name "./.packages"))
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
#+end_src
Once we have the package system up and running,
    we make sure Emacs has installed the dependencies:
#+begin_src emacs-lisp :tangle ../publish.el
(package-install 'htmlize)
#+end_src
The last initialization step
    is to require ~ox-publish~ so we can actually publish:
#+begin_src emacs-lisp :tangle ../publish.el
(require 'ox-publish)
#+end_src

**** Configuration
:properties:
:html_container: section
:end:
We need to set a few variables explicitly,
    mostly for including stylesheets
    and our custom pre/postamble.
Since we aren't loading my personal config,
    we start by setting my name and email address:
#+begin_src emacs-lisp :tangle ../publish.el
(setq user-full-name "Sean Gallagher"
      user-mail-address "seangllghr@gmail.com")
#+end_src
We declare strings
    to hold our custom HTML header and footer,
    including some code to make sure
    the copyright date in the footer updates appropriately,
    and a link to the [[https://simplecss.org/][Simple.css]] CDN:
#+begin_src emacs-lisp :tangle ../publish.el
(setq
 styles "<link
    href=\"https://cdn.simplecss.org/simple.min.css\"
    rel=\"stylesheet\"
    type=\"text/css\"
/>
<link
    href=\"/styles/styles.css\"
    rel=\"stylesheet\"
    type=\"text/css\"
/>"
 header "<h1>Sean Gallagher</h1>
<nav>
  <a href=\"/\">Home</a>
  <a href=\"/stocks.html\">The STOCKS Application</a>
  <a href=\"/build.html\">How it's Made</a>
</nav>"
 footer (concat "<p>&copy;&thinsp;2021&ndash;"
                (format-time-string "%Y")
                " %a<br>%e</p>"))
#+end_src
We can then use these values to explicitly set the appropriate ~org-mode~ values:
#+begin_src emacs-lisp :tangle ../publish.el
(setq org-html-head styles
      org-html-preamble header
      org-html-postamble footer
      org-src-preserve-indentation t)
#+end_src
If we're running on my home workstation
    (and, therefore, generating
    @@html: <span class="latex">L<span>a</span>T<span>e</span>X</span>@@
    @@latex: \LaTeX\ @@ files),
    we also need to change some relevant export settings.
The first part of this monstrous nightmare defines a list of packages
    that the exporter should include,
    while the second defines the remainder of the document preamble:
#+begin_src emacs-lisp :tangle ../publish.el
(if (string= (system-name) "Asgard")
    (setq org-latex-default-packages-alist
          '((""             "graphicx"  t)
            (""             "grffile"   t)
            (""             "longtable" nil)
            (""             "wrapfig"   nil)
            (""             "rotating"  nil)
            ("normalem"     "ulem"      t)
            (""             "amsmath"   t)
            (""             "textcomp"  t)
            (""             "amssymb"   t)
            (""             "capt-of"   nil)
            (""             "titling"   t)
            ("margin=1in"   "geometry"  nil)
            (""             "fontspec"  nil)
            (""             "setspace"  nil)
            ("tiny,compact" "titlesec"  nil)
            ("small"        "caption"   nil)
            (""             "enumitem"  nil)
            (""             "unicode-math" nil)
            ("x11names"     "xcolor"    nil)
            (""             "minted"    nil)
            ("colorlinks=true,allcolors=darkgray" "hyperref" t))
          org-latex-classes
          '(("article"
             "\\documentclass[11pt]{article}
[DEFAULT-PACKAGES]
\\setmainfont{TeX Gyre Pagella}[Ligatures=TeX]
\\setsansfont{TeX Gyre Heros}[Ligatures=TeX]
\\setmonofont{JetBrains Mono}[Scale=0.8]
\\setmathfont{Asana Math}
\\makeatletter
\\def\\@maketitle{%
\\singlespacing
\\begin{center}%
{\\LARGE \\@title \\par}%
\\vskip 1.5em%
{\\large \\@author}%
\\end{center}%
\\par
\\vskip 1.5em}
\\doublespacing
\\makeatother
\\setminted{baselinestretch=1,linenos,numbersep=4pt,obeytabs=true}"
             ("\\section{%s}" . "\\section*{%s}")
             ("\\subsection{%s}" . "\\subsection*{%s}")
             ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
             ("\\paragraph{%s}" . "\\paragraph*{%s}")
             ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
          ))
#+end_src

Finally, we set our main configuration ~alist~,
    which declares our publish targets:
#+begin_src emacs-lisp :tangle ../publish.el
(setq org-publish-project-alist
      (list
       (list "seangllghr.github.io:content"
             :language "en"
             :base-directory "./src"
             :recursive t
             :base-extension "org"
             :publishing-directory "./public"
             :publishing-function 'org-html-publish-to-html
             :headline-levels 5
             :html-divs '((preamble "header" "header")
                          (content "main" "content")
                          (postamble "footer" "footer"))
             :html-doctype "html5"
             :html-head-include-default-style nil
             :html-head-include-scripts nil
             :html-html5-fancy t
             :html-indent nil
             :html-validation-link nil
             :section-numbers nil
             :with-date nil
             :with-author t
             :with-title nil
             :with-toc nil)
       (list "seangllghr.github.io:static"
             :base-directory "./src"
             :recursive t
             :base-extension "css\\|jpg\\|gif\\|png\\|svg"
             :publishing-directory "./public"
             :publishing-function 'org-publish-attachment)))
(setq latex-publish-alist
      (list
       (list "seangllghr.github.io:archive"
             :base-directory "./src"
             :recursive t
             :base-extension "org"
             :exclude "\\(\\(build\\)\\|\\(^stocks\\)\\).org"
             :publishing-directory "./archive"
             :publishing-function 'org-latex-publish-to-latex
             :headline-levels 5
             :latex-listings 'minted
             :section-numbers nil
             :with-toc nil)
       (list "seangllghr.github.io:archive-static"
             :base-directory "./src"
             :recursive t
             :base-extension "jpg\\|gif\\|png\\|svg"
             :publishing-directory "./archive"
             :publishing-function 'org-publish-attachment)))
(if (string= (system-name) "Asgard")
    (setq org-publish-project-alist
          (append org-publish-project-alist latex-publish-alist)))
#+end_src

There are three publish processes in here:
    an org-to-HTML process that generates the content pages,
    a process to copy over any static assets,
    and — if we're on my local machine — a final job to generate
    @@html: <span class="latex">L<span>a</span>T<span>e</span>X</span>@@
     @@latex: \LaTeX\ @@ files from the relevant org files,
    which I'll turn into PDFs using ~latexmk~ on my local machine.
The last job gets appended only if
    the hostname matches my primary workstation[fn::
    Isn't Lisp such an elegant language?
    With all of those parentheses and bizarre indentation... 🤌
    Joking aside,
    that took far too long to puzzle out.
    Who thinks about code that way?
    I love how powerful Emacs and org-mode are,
    but I don't love actually programming it.];
    this saves GitHub's CI servers some time exporting the
    @@html: <span class="latex">L<span>a</span>T<span>e</span>X</span>,@@
    @@latex: \LaTeX,@@
    which I'm sure they appreciate.

Finally, we run the publishing command:
#+begin_src emacs-lisp :tangle ../publish.el
(org-publish-all t)
(message "Build complete")
#+end_src
